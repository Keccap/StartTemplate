// HELPERS:
$percent-gutter-fallback: $grid-gutter / ($max-container-width / 100)

=grid-clearfix
	&::after
		content: ''
		display: table
		clear: both




// CORE:

=wrapper
	max-width: #{$max-container-width + $grid-gutter}px
	margin: 0 auto
	padding-right: #{$grid-gutter / 2}px
	padding-left: #{$grid-gutter / 2}px




// Обычный row
=row($margin: $grid-gutter)
	display: flex
	flex-wrap: wrap
	margin-right: -#{$margin / 2}px
	margin-left: -#{$margin / 2}px
	+grid-clearfix
	// fallback
	#{$no-calc-selector} &
		margin-right: -#{$percent-gutter-fallback / 2 + '%'}	
		margin-left: -#{$percent-gutter-fallback / 2 + '%'}
	// fallback
	#{$no-flex-wrap-selector} &
		display: block


// row без отрицательных отступов
=rowF($gutter: $grid-gutter)
	display: flex
	flex-wrap: wrap
	+grid-clearfix
	margin-right: 0
	margin-left: 0
	// fallback
	#{$no-flex-wrap-selector} &
		display: block



// COLUMN:

// Стартовые стили колонки
=col()
	position: relative
	flex: 0 0 auto
	float: left
	min-width: 0
	min-height: 1px
	// fallback
	#{$no-calc-selector} &
		margin-right: #{$percent-gutter-fallback / 2 + '%'}		
		margin-left: #{$percent-gutter-fallback / 2 + '%'}


// Параметры колонок

// Параметры колонок, вызываются без аргументов если нужна колонка на всю ширину
// 	$n - размер колонки (по умолчанию = $max-column, т.е 100% ширина)
// 	$max-column - максимум колонок от которого расчитывается размер в %, на случай переопределения (по умолчанию = глобальный $grid-columns)
// 	$gutter - отступ между колонками, на случай переопределения (по умолчанию = глобальный $grid-gutter) 
//  ПРИМЕР: +size(6, 24) сделает колонку равную 1/4 макс колонок, что равно +size(3, 12)

// Параметры обычной колонки (отступы с обоих сторон = половине $gutter)
=size($n: $grid-columns, $max-column: $grid-columns, $gutter: $grid-gutter)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: #{$gutter / 2}px
	margin-left: #{$gutter / 2}px
	// fallback
	#{$no-calc-selector} &
		width: (100% / $max-column) * $n - $percent-gutter-fallback


// Колонка без отступов
=sizeF($n: $grid-columns, $max-column: $grid-columns)
	width: (100% / $max-column) * $n
	margin-right: 0
	margin-left: 0
	// fallback
	#{$no-calc-selector} &
		margin-right: 0
		margin-left: 0



// Колонка с полным отступом слева
=sizeML($n: $grid-columns, $max-column: $grid-columns, $gutter: $grid-gutter)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: 0
	margin-left: #{$gutter}px
	// fallback
	#{$no-calc-selector} &
		width: (100% / $max-column) * $n - $percent-gutter-fallback
		margin-right: 0
		margin-left: #{$percent-gutter-fallback + '%'}


// Колонка с полным отступом справа
=sizeMR($n: $grid-columns, $max-column: $grid-columns, $gutter: $grid-gutter)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: #{$gutter}px
	margin-left: 0
	// fallback
	#{$no-calc-selector} &
		width: (100% / $max-column) * $n - $percent-gutter-fallback
		margin-right: #{$percent-gutter-fallback + '%'}
		margin-left: 0



// Колонка с половинным отступом слева
=sizeML-small($n: $grid-columns, $max-column: $grid-columns, $gutter: $grid-gutter)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter / 2 + 0.5 + 'px'})
	margin-right: 0
	margin-left: #{$gutter / 2}px
	// fallback
	#{$no-calc-selector} &
		width: (100% / $max-column) * $n - $percent-gutter-fallback / 2
		margin-right: 0
		margin-left: #{$percent-gutter-fallback / 2 + '%'}


// Колонка с половинным отступом справа
=sizeMR-small($n: $grid-columns, $max-column: $grid-columns, $gutter: $grid-gutter)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter / 2 + 0.5 + 'px'})
	margin-right: #{$gutter / 2}px
	margin-left: 0
	// fallback
	#{$no-calc-selector} &
		width: (100% / $max-column) * $n - $percent-gutter-fallback / 2
		margin-right: #{$percent-gutter-fallback / 2 + '%'}
		margin-left: 0



// Изменение размера отступов в обычной колонке
=gutter($gutter, $n: $grid-columns, $max-column: $grid-columns)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: $gutter / 2
	margin-left: $gutter / 2


// Изменение размера отступов в колонке с полным отступом справа
=gutterMR($gutter, $n: $grid-columns, $max-column: $grid-columns)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: #{$gutter}px
	margin-left: 0


// Изменение размера отступов в колонке с полным отступом слева
=gutterML($gutter, $n: $grid-columns, $max-column: $grid-columns)
	width: calc(#{(100% / $max-column) * $n} - #{$gutter + 0.5 + 'px'})
	margin-right: 0
	margin-left: #{$gutter}px



// Оффсет для обычной колонки
=col-offset($n, $max-column: $grid-columns, $gutter: $grid-gutter)
	margin-left: calc(#{(100% / $max-column) * $n} + #{$gutter/2 + 0.5 + 'px'})
	// fallback
	#{$no-calc-selector} &
		margin-left: #{(100% / $max-column) * $n + $percent-gutter-fallback / 2}


// Оффсет для колонки без отступов
=col-offsetF($n, $max-column: $grid-columns)
	margin-left: #{(100% / $max-column) * $n}



=col-push($n, $max-column: $grid-columns)
	left: (100% / $max-column) * $n

=col-pull($n, $max-column: $grid-columns)
	right: (100% / $max-column) * $n



// Вспомогательные функции:

@function get-size($n: 1, $max-column: $grid-columns)
	@return (100% / $max-column) * $n

@function get-gutter()
	@return #{$grid-gutter + px}

