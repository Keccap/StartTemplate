// FONTS

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false)
	@font-face
		font-family: $font-family
		font-style: $style
		font-weight: $weight
		font-display: swap
		
		@if $asset-pipeline == true 
			src: font-url('#{$file-path}.eot')
			src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'), font-url('#{$file-path}.woff2') format('woff2'), font-url('#{$file-path}.woff') format('woff'), font-url('#{$file-path}.ttf') format('truetype')
		@else
			src: url('#{$file-path}.eot')
			src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff2') format('woff2'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype')



// converting to em / rem

$browser-context: $baseFontSize // $baseFontSize из _vars.sass

// px to em
@function em($pixels, $context: $browser-context)

	@if (unitless($pixels)) 
		$pixels: $pixels * 1px
	@if (unitless($context)) 
		$context: $context * 1px

	@return $pixels / $context * 1em


// px to rem
@function rem($pixels, $context: $browser-context)

	@if (unitless($pixels))
		$pixels: $pixels * 1px
	@if (unitless($context))
		$context: $context * 1px

	@return $pixels / $context * 1rem
