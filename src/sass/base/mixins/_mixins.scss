@mixin aspect-ratio($width, $height: $width) {
  &::after {
    content: '';
    display: block;
    padding-top: 1 / ($width / $height) * 100%;
  }
}



@mixin round($size) {
  width: $size;
  height: $size;
  border-radius: 50%;
}



@mixin clickable() {
  cursor: pointer;
  user-select: none;
}



@mixin responsive-svg() {
  display: block;
  width: 100%;
  height: 100%;
}



@mixin bg-cover() {
  background-size: cover;
  background-position: center;
}



@mixin full-pos($coord) {
  top: $coord;
  right: $coord;
  bottom: $coord;
  left: $coord;
}



@mixin full-abs($coord) {
  @include full-pos($coord);
  position: absolute;
}



@mixin full-fix($coord) {
  @include full-pos($coord);
  position: fixed;
}



@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}



@mixin center($axis) {
  @if $axis == both {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @else if $axis == w {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }
  @else if $axis == h {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }
}



@mixin scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}



@mixin placeholder() {
  ::-webkit-input-placeholder {@content} //use inside input-container element as
  ::-ms-input-placeholder {@content}     //@include placeholder {
  :-ms-input-placeholder {@content}      //  color: $faded-base;
  ::-moz-placeholder {@content}          //  font-weight: 300;
  :-moz-placeholder {@content}           //  opacity: 1;
  ::placeholder {@content}               //}
}



@mixin hidden-input() {
  position: absolute;
  left: -9999px;
  z-index: -1;
  width: 1px;
  height: 1px;
  overflow: hidden;
  opacity: 0;
  -webkit-appearance: none;
}



@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}



@mixin arrow($color, $thickness, $size, $direction) { // $direction: up, right, down, left
  $rotation: -135;

  @if $direction == right {
    $rotation: -45;
  } @else if $direction == down {
    $rotation: 45;
  } @else if $direction == left {
    $rotation: 135;
  }

  border: solid $color;
  border-width: 0 $thickness $thickness 0;
  padding: $size;
  transform: rotate($rotation+deg);
}



@mixin triangle($size, $color, $direction) { // $direction: up, down, left, right, up-right, up-left, down-right, down-left
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height / 2);
    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;
    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
}



@mixin br() {
  &::after {
    content: '\A';
    white-space: pre;
  }
}



@mixin force-new-lines-for-long-words() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}



@mixin css-lock($min-size: 1, $max-size: 1.4, $min-width: 20, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$max-size}#{$unit};
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width})));

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit};
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit}
  }
}



@mixin css-lock-full($min-size: 1, $mid-size: 1.2, $max-size: 1.4,  $min-width: 20, $mid-width: 30, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$mid-size}#{$unit};

  @media only screen and (max-width: $mid-width + 'px') and (min-width: $min-width + 'px') {
    #{$property}: calc(#{$min-size}#{$unit} + (#{$mid-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$mid-width} - #{$min-width})));
  }

  @media only screen and (max-width: $max-width + 'px') and (min-width: $mid-width + 'px') {
    #{$property}: calc(#{$mid-size}#{$unit} + (#{$max-size} - #{$mid-size}) * ((100vw - #{$mid-width}#{$unit}) / (#{$max-width} - #{$mid-width})));
  }

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit};
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit};
  }
}
